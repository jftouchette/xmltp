#
# gxreturnstatus.py		Constants for return status values
# -----------------
#
#
# $Source: /ext_hd/cvs/gx/gxreturnstatus.py,v $
# $Header: /ext_hd/cvs/gx/gxreturnstatus.py,v 1.4 2005/06/20 17:47:49 toucheje Exp $
#
#  Copyright (c) 2001-2003 Jean-Francois Touchette
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Library General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Library General Public License for more details.
#
#  You should have received a copy of the GNU Library General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  (The file "COPYING" or "LICENSE" in a directory above this source file
#  should contain a copy of the GNU Library General Public License text).
#  -------------------------------------------------------------------------
#
# Also contains the return status documentation function: 
#
#	getDescriptionForValue(ret)
#
# ------------------------------------------------------------------------------
# 2001nov25,jft: first version, based on os_rpcst.h
# 2002jan17,jft: + GENERAL_XML2SYB_ERROR_BEGIN, GENERAL_XML2SYB_ERROR_END
#		 + LOWEST_SP_ERROR, HIGHEST_SP_WARNING
#		 . getDescriptionForValue(ret): updated to recognize new values (ranges)
# 2002jan30,jft: + import gxconst for MODE_xxx constants
#		 . getReturnStatusForModeMismatch(actualMode)
# 2002mar02,jft: updated comment for GW_QUE_SIZE
# 2004oct05,jft: + DS_DEADLOCK	 = -1205
# 2005jun20,jft: + SSO_SESSION_EXPIRED	 = -1401
#		 + SSO_SESSION_NOT_FOUND = -1402
#

import gxconst		# required for MODE_xxx constants



RETURN_STATUS_OK	 = 0

LOWEST_SP_ERROR		 = -900
HIGHEST_SP_WARNING	 =  401

INIT_NOT_ASSIGNED_YET	 = -998		# default value at creation of gxrpcframe
NO_RETURN_STATUS_YET	 = -999		# default value when nothing done yet

SP_FAILED		 = -100		# -100, > 0, > -999: returned by SP


#
# Beginning of range for error return status values:
#
ERR_STATUS_START	 = -1000


#
# Error return status generated by CIG or TRG:
#
DS_NOT_AVAIL		 = -1100	# RPC could be retried 
DS_RPC_TIMEOUT		 = -1101	# RPC could be retried... 

SP_EVENT_NB_DUPLICATE	 = -1102	# returned by SP	
SP_EVENT_NB_BAD_SEQ	 = -1103	# returned by SP	

DS_FAIL_CANNOT_RETRY	 = -1105	# should NOT be retried 
DS_DEADLOCK		 = -1205	# generated by XML2SYB

DS_EXECUTION_FAILED	 = -1112	# from CIG (was -1102) 

OS_RPC_GATE_CLOSED	 = -1150	# should be retried later 
OS_RPC_NAME_BLOCKED	 = -1151	# should NOT be retried 

OS_RESOURCES_ERROR	 = -1155	# LEGACY -- Not used
OS_EXEC_INIT_FAILED	 = -1156	# LEGACY -- Not used

#
# XML-TP RPC call parsing error:
#
PARSE_ERROR_CANNOT_GET_PARAMS = -1160	# Parsing Error (was "cannot get RPC params")

#
# registered procedures errors:
#
OS_REG_PROC_ID_NOTFND	 = -1161	# reg proc id not in table 
OS_NO_P_FRAME 		 = -1162	# could not get p_frame    -- LEGACY
OS_BAD_REG_PROC_DEF	 = -1163	# reg proc has bad def.	   -- LEGACY
OS_RETPARAMS_FAILED	 = -1164	# could not set ret params         ---- used in trgx.py !!!
OS_INP_PARAM_BAD	 = -1165	# in param not found or bad-- LEGACY

GW_RPC_TIMEOUT		 = -1201	# LEGACY -- Not used

GW_QUE_SIZE		 = -1202	# intercept Queue is full or closed

OS_NOT_AVAIL		 = -1203	# LEGACY -- Not used

#
# Generated by Order GW / TRG:
#
GW_IN_QUEUE_FULL	 = -1300	# RPC could be retried

GW_NOT_TO_RETRY_BEGIN	 = ( GW_IN_QUEUE_FULL - 10)
GW_NOT_TO_RETRY_END	 = ( GW_IN_QUEUE_FULL - 99)

GW_SOG_DUPL_ORD_ID	 = -1330  # duplicate ord_id, rejected

#
# values returned by TRG depending on "mode":
#
REJECTED_WHEN_INACTIVE	 = -1360  # regproc/RPC rejected when 
				  # server is "inactive"      
REJECTED_WHEN_PRIMARY	 = -1361  # regproc/RPC rejected when 
				  # server is "primary"       
REJECTED_WHEN_SECONDARY  = -1362  # regproc/RPC rejected when 
				  # server is "secondary"     

#
# values returned by reg proc that fetch data from queues:
#
Q_POLL_EMPTY		 = -1370 # queue is empty	
Q_POLL_CLOSED		 = -1371 # queue is closed	
Q_POLL_DENIED_BUSY	 = -1372 # queue access denied: busy 

#
# NOTE: Asynch RPC not in GX servers...
#
ASYNCH_BUSY	 	 = -1375 # asynch RPC denied: busy    -- LEGACY
ASYNCH_DISABLED 	 = -1376 # asynch RPC: disabled by op -- LEGACY
ASYNCH_FAILED		 = -1377 # asynch RPC request failed  -- LEGACY

RPC_LANG_NOT_ALLOWED	 = -1389 # login not denied RPC, lang 

#
# values returned from operator commands (reg.procs):
#
GW_OPER_CMD_PERM_DENIED  = -1390 # permission denied 
GW_OPER_CMD_FAILED	 = -1391

#
# values returned by SSO server:
#
SSO_SESSION_EXPIRED	 = -1401
SSO_SESSION_NOT_FOUND	 = -1402


# Range of values returned by XML2SYB when it has a negative rc (internally).
# Normally, XML2SYB should translate these rc to standard return status
# values.
#
GENERAL_XML2SYB_ERROR_BEGIN = -1500
GENERAL_XML2SYB_ERROR_END   = -1599


dictValueToDescrition = {
	RETURN_STATUS_OK	 : "[OK]",
	NO_RETURN_STATUS_YET	 : "NO_RETURN_STATUS_YET",
	SP_FAILED		 : "SP_FAILED",
	ERR_STATUS_START	 : "ERR_STATUS_START",
	DS_NOT_AVAIL		 : "DS_NOT_AVAIL",
	DS_RPC_TIMEOUT		 : "DS_RPC_TIMEOUT",
	SP_EVENT_NB_DUPLICATE	 : "SP_EVENT_NB_DUPLICATE",
	SP_EVENT_NB_BAD_SEQ	 : "SP_EVENT_NB_BAD_SEQ",
	DS_FAIL_CANNOT_RETRY	 : "DS_FAIL_CANNOT_RETRY",
	DS_DEADLOCK		 : "DS_DEADLOCK",
	DS_EXECUTION_FAILED	 : "DS_EXECUTION_FAILED",
	OS_RPC_GATE_CLOSED	 : "OS_RPC_GATE_CLOSED",
	OS_RPC_NAME_BLOCKED	 : "OS_RPC_NAME_BLOCKED",
	OS_RESOURCES_ERROR	 : "OS_RESOURCES_ERROR",
	OS_EXEC_INIT_FAILED	 : "OS_EXEC_INIT_FAILED",
	PARSE_ERROR_CANNOT_GET_PARAMS : "PARSE_ERROR_CANNOT_GET_PARAMS",
	OS_REG_PROC_ID_NOTFND	 : "OS_REG_PROC_ID_NOTFND",
	OS_NO_P_FRAME 		 : "OS_NO_P_FRAME",
	OS_BAD_REG_PROC_DEF	 : "OS_BAD_REG_PROC_DEF",
	OS_RETPARAMS_FAILED	 : "OS_RETPARAMS_FAILED",
	OS_INP_PARAM_BAD	 : "OS_INP_PARAM_BAD",
	GW_RPC_TIMEOUT		 : "GW_RPC_TIMEOUT",
	GW_QUE_SIZE		 : "GW_QUE_SIZE",
	OS_NOT_AVAIL		 : "OS_NOT_AVAIL",
	GW_IN_QUEUE_FULL	 : "GW_IN_QUEUE_FULL",
	GW_NOT_TO_RETRY_BEGIN	 : "GW_NOT_TO_RETRY_BEGIN",
	GW_NOT_TO_RETRY_END	 : "GW_NOT_TO_RETRY_END",
	GW_SOG_DUPL_ORD_ID	 : "GW_SOG_DUPL_ORD_ID",
	REJECTED_WHEN_INACTIVE	 : "REJECTED_WHEN_INACTIVE",
	REJECTED_WHEN_PRIMARY	 : "REJECTED_WHEN_PRIMARY",
	REJECTED_WHEN_SECONDARY  : "REJECTED_WHEN_SECONDARY  ",
	Q_POLL_EMPTY		 : "Q_POLL_EMPTY",
	Q_POLL_CLOSED		 : "Q_POLL_CLOSED",
	Q_POLL_DENIED_BUSY	 : "Q_POLL_DENIED_BUSY",
	ASYNCH_BUSY	 	 : "ASYNCH_BUSY",
	ASYNCH_DISABLED 	 : "ASYNCH_DISABLED ",
	ASYNCH_FAILED		 : "ASYNCH_FAILED",
	RPC_LANG_NOT_ALLOWED	 : "RPC_LANG_NOT_ALLOWED",
	GW_OPER_CMD_PERM_DENIED  : "GW_OPER_CMD_PERM_DENIED  ",
	GW_OPER_CMD_FAILED	 : "GW_OPER_CMD_FAILED",
	SSO_SESSION_EXPIRED	 : "SSO_SESSION_EXPIRED",
	SSO_SESSION_NOT_FOUND	 : "SSO_SESSION_NOT_FOUND",
	GENERAL_XML2SYB_ERROR_BEGIN : "GENERAL_XML2SYB_ERROR_BEGIN",
	GENERAL_XML2SYB_ERROR_END   : "GENERAL_XML2SYB_ERROR_END", 
	LOWEST_SP_ERROR		 : "LOWEST_SP_ERROR",
	HIGHEST_SP_WARNING	 : "HIGHEST_SP_WARNING",
 }

def getDescriptionForValue(ret):
	try:
		return (dictValueToDescrition[ret])
	except KeyError:
		pass

	if (ret > 0 and ret <= HIGHEST_SP_WARNING):
		return "[SP warning]"
	if (ret < 0 and ret >= LOWEST_SP_ERROR):
		return "[SP failed]"
	if (ret >= GENERAL_XML2SYB_ERROR_END and ret <= GENERAL_XML2SYB_ERROR_BEGIN):
		return "[XML2SYB error]"

	return "[UnknownRetStat]"


def getReturnStatusForModeMismatch(actualMode):
	if (actualMode == gxconst.MODE_PRIMARY):
		return (REJECTED_WHEN_PRIMARY)

	if (actualMode == gxconst.MODE_SECONDARY):
		return (REJECTED_WHEN_SECONDARY)

	return (REJECTED_WHEN_INACTIVE)




if __name__ == '__main__':
	ls = dictValueToDescrition.keys()
	ls.sort()
	for k in ls:
		print k, getDescriptionForValue(k)

	for k in xrange(-3,3):
		print k, getDescriptionForValue(k)

	ls = [ -2045, -1900, -1510, -1000, -100, -6, 100, 200 , 400]
	for k in ls:
		print k, getDescriptionForValue(k)

	print  "toto", getDescriptionForValue("toto")
#
# End of  gxreturnstatus.py
#
 
